
				who
				|??????
			---------------------
			|		|
			where		when
			|space		|time - 15 May 2023
		-----------------------------------
		|		|		|
		why		what		how(wow)
		|reason		|inFORMation	|implementation
				|Knowledge	| (apply)
						     |Wisdom
						-------------
						|	   |	
						success<--feedback				
	1994 - James Gosling
			Green Project
				|
			-------------------
			|
			gadget


	Fridge	Ovan	Camera	Fan
	|	|	|	|
	layer	layer	layer	layer
	|	|	|	|
	app	app	app	app


	
	CD-Player1	CD-Player2
	| Sony		|Hitachi
	|				
	CD	



	

	
	2023

	
		brand	set of instructions
		|	|
		Java Programming Language
					|
			--------------------------------
			|	|	|	|
			listen speak   read    writing
			->	->	->	->

		V	A	K	O	G
		|	|	|	|	|
		eye    ear	skin	nose   tounge
		|	|	  |	|	|
		visual listening  skin  smell	taste




							M1Chip
H/w	X86			SPARC	      hpseries  PowerPc	BB	any
Vendor	Intel			Sun/Oracle	HP	Apple	IBM	any
OS	Windows			Solaris		HPUX	Mac	AIX	Linux
	|			|		|	|	|	|
	#include		#include	
	calc.cpp <--logic ---> calc.cpp	-->	->	->	->	->
	|			|		|	|	|	|
	turboc/VC++		cc		cc	cc	cc	gcc/g++
	|			|		|	|	|	|
compile calc.obj		calc.o		calc.o	calc.o	calc.o	calc.o
	|			|		|	|	|	|
link	calc.exe ---------------calc.out   calc.out calc.out  calc.out calc.out
	|			|		|	|	|	 |
runit	calc		  ./calc.out   ./calc.out ./calc.out  ./calc.out ./calc.out


H/w	X86			SPARC	      hpseries  PowerPc	BB	any	new
Vendor	Intel			Sun/Oracle	HP	Apple	IBM	any	new
OS	Windows			Solaris		HPUX	Mac	AIX	Linux	new
	|			|		|	|	|	|
	calc.java		|		|	|	|	|
	|			|		|	|	|	|
	JVM/JRE			JRE		JRE	JRE	JRE	JRE	JRE
	|			|		|	|	|	|
compile calc.class		|		|	|	|	|
	  |			|		|	|	|	|
interpret calc.class		->		->	->	->	->

	Write Once Run Anywhere





-------------------------------------------
	.java (file must have .java as an extension)


	First.java
	|
	javac First.java <--- compile it
	|
	you would get a .class file(s)!!!
	|
	well what would be the name(s) of that/these file
that depends upon the "class(es) declared" in the .java file




	First.java
	----------------------
	class A
	{
	}
	class B { }
	class C { }

	why do we write a class in java

	- the fundamental unit of programming in JPL
		is to write a class

	- highly structured language

	----------------
	javac First.java
	|
	A.class | B.class | C.class files are generated

	Which one to run?????

	the class which has main() method is eligible to run


	each class can have its own main, 

	how to run???

	java ClassName (without extension)

	java Magician
	


classname cannot have spaces
first letter must be in capital case
function name first letter must be small


Naming Conventions


ClassName	-	SavingsAccount
			DriverManager
			FixedDepositAccount

functionName	-	fundTransfer() { }
			setLookAndFeel() { }
			calculateRateOfInterest() { }			

fieldnames	-	rollNumber
variablenames		accountNumber
			rateOfInterest

CONSTANTS		PI=3.14
			SPEED_OF_LIGHT=186000.519   miles/sec
			MAX_RATE_OF_INTEREST
			MIN_RATE_OF_INTEREST

package names		java.awt.event.*
			java.lang.*
			com.sbi.myproject.*

		C:
		|
	------------------
	|
	myfiles
	|
	com
	|
	sbi
	|
	myproject










  class is a  blueprint	of the object
	|
	Fruit	mango; <-- object is the instance of a class
	Fruit	jackfruit;
	Fruit   apple;
	|
	color
	size
	shape
	cost
	weight





----------------------------------------


Functions are of FOUR types

	- purpose of a function
	- perform a particular task
	- repeat it

	void dance()
	{
	}
	void withdraw()
	{
	}

	returnType  functionName(argument list)
	{
		code to do
		return returnAValue;
	}

Four types of functions

	1. function "without arguments" 
				 |
		void clearScreen(|)
		 |
	And "without return"


	2. function "with    arguments" 
				|
	void gotoLocation(int longitude, int latitude)
	 |
But "without return"


	3. function "with    arguments" 
				|	
	float findAverage(int x, int y, int z)
	|
And "with    return"



	4. function 		"without arguments" 
					        |
	float findTheDistanceBetweenSunAndEarth(|) 
	|
But "with    return"

	








passed by value
passed by address
passed by reference




















	Bird Eye View Of Java Technology


			Java Technology
			   |
	-----------------------------------------
	|		   |			|
	JSE		  JEE			JME(android)
	|		   |	
    standard		enterprise
    desktop 			|
    applications	  ---------------
    Core Java		  |		|
Simple Java Program	  Web		EJB - IBM WebSphere (WAS)/ Oracle WebLogic
4 functions		Servlets	|	 DB
Data Types		JSP	------------------|--------------------
OOPS Concepts			|Spring		| |		|
Packages			Session		Entity		Message (JMS|Kafka)
Exception Handling		|sbi.com	  (Hibernate)	SMS|Mail
				|airindia.com
Multithreading		---------------------
Generics 		|		|
 Collection f/w		Stateless	Stateful
File handling - i/o
JDBC - insert /update/delete
 select/function/procedure





enterprise
----------------
1
2
3
4
5
6
7















  1. Abstraction
  2. Encapsulation
  3. Polymorphism
  4. Inheritance
  5. Object communication

  Association 
  isA hasA usesA producesA

   class Machine
	   |isA
 class ATMMachine extends Machine
 {
      CardReader crdReader = new CardReader(); //hasA

	//producesA	 //usesA
	Statement     withdraw(ATMCard crd, float amt) {

	}	

 }

  
  class Animal { }
  class Mammal extends Animal
  {
  }
  class Human extends Mammal
  {
      Heart theHeart = new Heart(); //hasA
      Brain  left  = new Brain();
      Brain  right = new Brain();
      Lung lung1 = new Lung();
      Lung lung2 = new Lung();
	Kidney k1 = new Kidney();

  }







			Data Types
			   |
		--------------------------------
		|			|
		Primitive		Secondary
		|				|
---------------------------------		--------------
|	  |  	    |		|		|
Integral Floating  Character	Boolean		String
|	  |		|	 |		|
byte  1  float 4     char 2	boolean 1     "text is here" 
short 2  double 8
int   4
long  8


	1 byte = 8 bits

		1 bit = 0
			1

		2 bits = 
			0 0
			0 1
			1 0 
			1 1

		3 bits

			0 0 0	0
			0 0 1	1
			0 1 0	2
			0 1 1 	3
			1 0 0	4
			1 0 1	5
			1 1 0	6
			1 1 1	7

		4 = 16
		5 = 32
		6 = 64
		7 = 128
		8 = 256








